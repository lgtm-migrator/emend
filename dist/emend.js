/** @module emend @version 1.0.5 @license MIT @author Ris Adams <emend@risadams.com> @copyright Copyright Â© 2021 Ris Adams. All rights reserved. **/
!function(t,e){"use strict";t[e]=function(){"use strict";const n=e=>{const i=t=>t.split("").map(t=>t.charCodeAt(0));const o=t=>("0"+Number(t).toString(16)).substr(-2);const s=t=>i(e).reduce((t,e)=>t^e,t);return t=>t.split("").map(i).map(s).map(o).join("")},r=e=>{const i=t=>t.split("").map(t=>t.charCodeAt(0));const o=t=>i(e).reduce((t,e)=>t^e,t);return t=>String(t).match(/.{1,2}/g).map(t=>parseInt(t,16)).map(o).map(t=>String.fromCharCode(t)).join("")};class t{constructor(){this.__version="1.0.3";this.__self=this;this.options={explicitPrefix:"@",salt:"",explicitOnly:false,domRemoveDelay:1200,sendClickDelay:500};this.init=t=>{this.options=Object.assign(this.options,t);this.cipher=n(this.options.salt);this.decipher=r(this.options.salt);var e=document.querySelectorAll("a");for(var i=0;i<e.length;i++){var o=e[i];var s=o.getAttribute("href");if(s&&s.indexOf("mailto:")===0){if(!this.options.explicitOnly&&s.indexOf("mailto:"+this.options.explicitPrefix)!==0)continue;else if(s.indexOf("mailto:"+this.options.explicitPrefix)===0){o.setAttribute("data-emended-mailto",s.replace("mailto:"+this.options.explicitPrefix,""));o.href="#"}else if(!this.options.explicitOnly)this.protect(o)}else continue;o.addEventListener("click",t=>{t.preventDefault();var e=t.target;this.__self.sendMail(e)})}};this.encode=t=>{t=t.replace("mailto:","");return this.cipher(t)};this.decode=t=>{return this.decipher(t)};this.protect=t=>{var e=t.getAttribute("href");e=e.replace("mailto:","");t.setAttribute("data-emended-mailto",this.encode(e));t.setAttribute("href","#")};this.sendMail=e=>{if(e.hasAttribute("data-emended-mailto")){let t="mailto:"+this.decode(e.getAttribute("data-emended-mailto"));var i=document.createElement("a");i.style.visibility="hidden";i.style.position="absolute";i.href=t;document.body.appendChild(i);setTimeout(()=>{i.click()},this.options.sendClickDelay);setTimeout(()=>{document.body.removeChild(i)},this.options.domRemoveDelay)}}}}const e=new t;return e}(),"function"==typeof define&&define.amd?define(function(){return t[e]}):"object"==typeof exports&&(module.exports=t[e])}("object"==typeof window&&window||this,"emend");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
